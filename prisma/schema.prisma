generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestsSent       ConnectionRequests[] @relation("Sender")
  requestsReceived   ConnectionRequests[] @relation("Recipient")
  connectionsAsUser1 Connection[]         @relation("User1Connections")
  connectionsAsUser2 Connection[]         @relation("User2Connections")
  Profile            Profile?
}

model Profile {
  id String @id @default(uuid())
  name String
  bio String?
  age Int?
  gender String?
  photo String?
  github String?
  portfolio String?
  location String?
  skills String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user User @relation(fields: [userId], references: [id])
}

model ConnectionRequests {
  id              String   @id @default(uuid())
  senderUserId    String
  recipientUserId String
  action          Action
  status          Status   @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  sender    User @relation("Sender", fields: [senderUserId], references: [id])
  recipient User @relation("Recipient", fields: [recipientUserId], references: [id])

  @@unique([senderUserId, recipientUserId])
}

enum Action {
  RIGHT
  LEFT
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
  IGNORED
}

model Connection {
  id        String   @id @default(uuid())
  user1Id   String
  user2Id   String
  matchedAt DateTime @default(now())

  user1 User @relation("User1Connections", fields: [user1Id], references: [id])
  user2 User @relation("User2Connections", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
}
